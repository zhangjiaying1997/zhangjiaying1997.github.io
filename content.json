{"meta":{"title":"Jiaying�ĸ���Сվ","subtitle":"Jiaying��blog","description":"��ӭ������ӱ���˲���","author":"Jiaying zhang","url":"http://zhangjiaying.github.io","root":"/"},"pages":[],"posts":[{"title":"Typora的使用和Markdown基本写作","slug":"Typora的使用和Markdown基本写作","date":"2022-09-28T10:38:39.000Z","updated":"2022-09-28T10:39:53.610Z","comments":true,"path":"2022/09/28/Typora的使用和Markdown基本写作/","link":"","permalink":"http://zhangjiaying.github.io/2022/09/28/Typora%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8CMarkdown%E5%9F%BA%E6%9C%AC%E5%86%99%E4%BD%9C/","excerpt":"","text":"Markdown学习标题: 一级标题: #(空格)+标题名称 (回车)就可以看到标题变大了 二级标题: ## (空格)+标题名称 n级标题: 前面n个#号就可以了 二级标题三级标题字体Hello,World! &#x2F;&#x2F;粗体在需要加粗字体两边各加两个** Hello,World! &#x2F;&#x2F;斜体在需要加斜字体两边各加一个* Hello,World! &#x2F;&#x2F;斜体加粗在需要加粗斜字体两边各加三个*** Hello,World! &#x2F;&#x2F;字体中间划线需要在字体两边各加两个~~ 引用 需要引用的话，一般是别人说的话或者等 &#x2F;&#x2F; &gt;+空格 ，结束引用使用enter键就可以，不结束的话，接下来建立的标题会处于被引用标题之下级别 分割线 &#x2F;&#x2F; —+enter键 三个减号加enter键,不占全屏 &#x2F;&#x2F; ***+enter键 三个星号加enter键，占全屏 图片第一种方式采用 ![需要标注的图片名称]+(本地图片所在地址) &#x2F;&#x2F;这个方法只能在本地访问，不能全网访问! 可以直接将上面的 ![需要标注的图片名称]+(本地图片所在地址) 复制下来黏贴，就得到一模一样的图片了 第二种方式采用 ![需要标注的图片名称]+（网络图片所在地址) &#x2F;&#x2F;这个方法可以在任何地方访问,网络图片所在地址，鼠标放在图片上点右键，然后点审查，出来之后放在那一项上面就会有地址，这是比较简便的做法，有的图片无法访问，因为不是真实地址，有部分经过了渲染，需要逆向寻找到原地址，这是python课程里的内容，简要一提 超链接点击跳转到张的个人博客 &#x2F;&#x2F; [对需要跳转的超链接(或url)的名称，任意取名]+(url，比如跳转到我的博客的地址，只需要将我的博客url放在这里就行了，注意这里并不会跳转，只有部署到网站上了点击才会跳转) 列表&#x2F;&#x2F;有序列表 序号+.+空格 回车后下一行会自动序号加一 A C &#x2F;&#x2F;无序列表 -+空格+序号名（随便取）,用来记录一下有规律的东西 无序1 无序2 无序3 &#x2F;&#x2F;注意一点，列表序号删除后，但是列表任然可能连续几行，继续enter直到与上一个标题差不多平齐，否则建立的标题都会在这一个标题之下!!! 表格创建方式一:采用源代码,直接在源代码模式跟下面一致或者写完后删除空白行退出源代码模式就能形成表格了 &#x2F;*表格项1 表格项2 表格项3 表格项4 表格项5 表格项6 *&#x2F; 名字 性别 生日 张三 男 25 创建方式二：直接右键，插入-&gt;表格 代码&#x2F;&#x2F; ···（这三个点必须是Tab左上的那个点，而不是右手的那个点)+java（需要写的代码语言，c就写c,java就写java) 1#include &lt;stdio.h&gt; //c标准库","categories":[],"tags":[{"name":"博客写作","slug":"博客写作","permalink":"http://zhangjiaying.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C/"}]},{"title":"将项目（个人博客）部署到云服务器的一些经验","slug":"将项目（个人博客）部署到云服务器的一些经验","date":"2022-09-27T18:13:14.000Z","updated":"2022-09-28T08:28:18.949Z","comments":true,"path":"2022/09/28/将项目（个人博客）部署到云服务器的一些经验/","link":"","permalink":"http://zhangjiaying.github.io/2022/09/28/%E5%B0%86%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%89%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C/","excerpt":"","text":"将个人博客(hexo搭建)部署到云服务器上: 注意nginx的目录和相关命令， lsof -i:端口号 &#x2F;&#x2F;查看端口进程情况，可以用来看部署的hexo是否启动了 部署前一定要去安全组开放相应的端口，4000,8080等，并且端口一定要和nginx中的nginx.conf对应 修改nginx.conf最为重要，否则即使部署了也无法成功，一般容易显示403，代表部署成功，但是目录或者端口不对，一定要将nginx中的servername项改为localhost，不然部署了也无法成功会403，同时还要去宝塔里修改网站目录和运行目录，网站目录修改为存放需要显示的index.html文件的上一级文件夹，其中hexo是使用public文件夹，因此只需要到public这一文件夹即可 niginx.conf中也是如此，也需要注意root的文件夹应该是hexo中的public文件夹 第二就是hook（钩子的使用),如何将一个本地的hexo同步部署到github和云服务器上，github上需要在项目的setting项下找到webhook，根据教程跟进，暂时没有部署完全，等考完再继续部署，其中需要了解的知识点有进程和端口的对应关系以及如何部署，不同端口怎么通过外部访问，怎么分配，nginx的使用（这很重要),hook(钩子）的使用，也很重要，可以简化部署步骤，多平台部署,暂且先写这么多 要想服务器访问通过，一定需要在宝塔面板的左边栏找到安全添加相应的程序端口，比如默认的hexo是4000端口，就必须添加这个端口!!!然后就可以通过 公网ip:端口号 进行访问","categories":[],"tags":[{"name":"云服务器","slug":"云服务器","permalink":"http://zhangjiaying.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"搭建个人博客","slug":"搭建个人博客","date":"2022-09-27T05:36:55.000Z","updated":"2022-09-27T05:41:25.288Z","comments":true,"path":"2022/09/27/搭建个人博客/","link":"","permalink":"http://zhangjiaying.github.io/2022/09/27/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"搭建方式:hexo+github仓库 搭建博客过程准备知识： ①git基本操作和版本，分支知识 ②云主机的配置，仓库版本的同步控制 一,搭建本地博客仓库 准备环境: ​ 下载node.js，安装npm并且查看node和npm版本 ​ 查看node 和npm版本命令： ​ node -v ​ npm -v ​ 安装镜像源: ​ npm install -g cnpm –registry&#x3D;https://registry.npm.taobao.org ​ 运行cnpm ​ 查看cnpm版本信息 ​ cnpm -v ​ 运行以下命令: ​ cnmp install -g hexo-cli ​ hexo -v &#x2F;&#x2F;查看hexo版本信息 ​ mkdir blog &#x2F;&#x2F;建立空的个人博客文件夹 ​ cd blog&#x2F; &#x2F;&#x2F;进入博客目录 ​ sudo(这个在linux下才需要，windows下不需要) hexo init &#x2F;&#x2F;初始化hexo,形成默认个人博客页面 ​ ls -l &#x2F;&#x2F;查看blog下的文件，也就是刚刚hexo初始化生成的博客文件 ​ hexo s &#x2F;&#x2F;启动博客在本地渲染，会自动生成一个本地端口地址，打开就可以看见个人博客 ​ hexo n “博客文章名” &#x2F;&#x2F;其中n是new的缩写，这个命令是在source&#x2F;_posts&#x2F;博客文章名.md,所有的博客都是以.md形式存储在__posts文件夹下 ​ hexo clean &#x2F;&#x2F;清理命令 ​ hexo g &#x2F;&#x2F;g是generate，生成的意思，意思是生成hexo 二，部署到github本地仓库 ​ 1，新建一个仓库命名为用户名.github.io，必须是这样形式才能进行网络访问blog ​ 2，cnpm install –save hexo-deployer_git &#x2F;&#x2F;安装 ​ 3,vim _config.yml &#x2F;&#x2F;进入这个文件修改配置,找到#Deployment 在下面的type后面填上git（不要引号)，再在下面加上一行repo: 创建的github仓库的地址,再在repo下加上一行branch: master(这个分支是你创建的，一定要和你的github上的分支对应，分支控制很重要，最好一开始没有创建分支) ​ 4,hexo g &#x2F;&#x2F;一定要再生成，然后才部署到远端仓库，不然直接hexo d是没用的 ​ 5,hexo d &#x2F;&#x2F;前面已经通过修改_config.yml修改了部署方式，直接hexo d就可以同步到远端仓库 至此，已经全部部署完成，直接通过 用户名.github.io就可以通过公网访问个人博客了，由于时间关系暂时不会博客写作，有点凌乱，暂且作为一次部署笔记，后面再部署到云端服务器. 6,注意一点，直接在_hosts下创建的.md文件不能hexo s生成成功，也无法上传，需要？？？所以最好是直接在blog下gitbash直接hexo n,然后再去修改就可以了。","categories":[],"tags":[]},{"title":"我的第一篇博客文章","slug":"我的第一篇博客文章","date":"2022-09-27T04:30:33.000Z","updated":"2022-09-27T04:30:33.129Z","comments":true,"path":"2022/09/27/我的第一篇博客文章/","link":"","permalink":"http://zhangjiaying.github.io/2022/09/27/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-09-27T04:28:54.313Z","updated":"2022-09-27T04:28:54.313Z","comments":true,"path":"2022/09/27/hello-world/","link":"","permalink":"http://zhangjiaying.github.io/2022/09/27/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"博客写作","slug":"博客写作","permalink":"http://zhangjiaying.github.io/tags/%E5%8D%9A%E5%AE%A2%E5%86%99%E4%BD%9C/"},{"name":"云服务器","slug":"云服务器","permalink":"http://zhangjiaying.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]}